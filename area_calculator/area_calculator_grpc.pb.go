// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package area_calculator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AreaCalculatorClient is the client API for AreaCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AreaCalculatorClient interface {
	TriangleArea(ctx context.Context, in *TriangleParams, opts ...grpc.CallOption) (*AreaReply, error)
	RectangleArea(ctx context.Context, in *RectangleParams, opts ...grpc.CallOption) (*AreaReply, error)
	RhombusArea(ctx context.Context, in *RhombusParams, opts ...grpc.CallOption) (*AreaReply, error)
	SquareArea(ctx context.Context, in *SquareParams, opts ...grpc.CallOption) (*AreaReply, error)
}

type areaCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAreaCalculatorClient(cc grpc.ClientConnInterface) AreaCalculatorClient {
	return &areaCalculatorClient{cc}
}

var areaCalculatorTriangleAreaStreamDesc = &grpc.StreamDesc{
	StreamName: "TriangleArea",
}

func (c *areaCalculatorClient) TriangleArea(ctx context.Context, in *TriangleParams, opts ...grpc.CallOption) (*AreaReply, error) {
	out := new(AreaReply)
	err := c.cc.Invoke(ctx, "/area_calculator.AreaCalculator/TriangleArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var areaCalculatorRectangleAreaStreamDesc = &grpc.StreamDesc{
	StreamName: "RectangleArea",
}

func (c *areaCalculatorClient) RectangleArea(ctx context.Context, in *RectangleParams, opts ...grpc.CallOption) (*AreaReply, error) {
	out := new(AreaReply)
	err := c.cc.Invoke(ctx, "/area_calculator.AreaCalculator/RectangleArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var areaCalculatorRhombusAreaStreamDesc = &grpc.StreamDesc{
	StreamName: "RhombusArea",
}

func (c *areaCalculatorClient) RhombusArea(ctx context.Context, in *RhombusParams, opts ...grpc.CallOption) (*AreaReply, error) {
	out := new(AreaReply)
	err := c.cc.Invoke(ctx, "/area_calculator.AreaCalculator/RhombusArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var areaCalculatorSquareAreaStreamDesc = &grpc.StreamDesc{
	StreamName: "SquareArea",
}

func (c *areaCalculatorClient) SquareArea(ctx context.Context, in *SquareParams, opts ...grpc.CallOption) (*AreaReply, error) {
	out := new(AreaReply)
	err := c.cc.Invoke(ctx, "/area_calculator.AreaCalculator/SquareArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaCalculatorService is the service API for AreaCalculator service.
// Fields should be assigned to their respective handler implementations only before
// RegisterAreaCalculatorService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type AreaCalculatorService struct {
	TriangleArea  func(context.Context, *TriangleParams) (*AreaReply, error)
	RectangleArea func(context.Context, *RectangleParams) (*AreaReply, error)
	RhombusArea   func(context.Context, *RhombusParams) (*AreaReply, error)
	SquareArea    func(context.Context, *SquareParams) (*AreaReply, error)
}

func (s *AreaCalculatorService) triangleArea(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriangleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.TriangleArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/area_calculator.AreaCalculator/TriangleArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.TriangleArea(ctx, req.(*TriangleParams))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AreaCalculatorService) rectangleArea(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RectangleParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RectangleArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/area_calculator.AreaCalculator/RectangleArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RectangleArea(ctx, req.(*RectangleParams))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AreaCalculatorService) rhombusArea(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RhombusParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.RhombusArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/area_calculator.AreaCalculator/RhombusArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.RhombusArea(ctx, req.(*RhombusParams))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *AreaCalculatorService) squareArea(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SquareArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/area_calculator.AreaCalculator/SquareArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SquareArea(ctx, req.(*SquareParams))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterAreaCalculatorService registers a service implementation with a gRPC server.
func RegisterAreaCalculatorService(s grpc.ServiceRegistrar, srv *AreaCalculatorService) {
	srvCopy := *srv
	if srvCopy.TriangleArea == nil {
		srvCopy.TriangleArea = func(context.Context, *TriangleParams) (*AreaReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method TriangleArea not implemented")
		}
	}
	if srvCopy.RectangleArea == nil {
		srvCopy.RectangleArea = func(context.Context, *RectangleParams) (*AreaReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RectangleArea not implemented")
		}
	}
	if srvCopy.RhombusArea == nil {
		srvCopy.RhombusArea = func(context.Context, *RhombusParams) (*AreaReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method RhombusArea not implemented")
		}
	}
	if srvCopy.SquareArea == nil {
		srvCopy.SquareArea = func(context.Context, *SquareParams) (*AreaReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SquareArea not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "area_calculator.AreaCalculator",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "TriangleArea",
				Handler:    srvCopy.triangleArea,
			},
			{
				MethodName: "RectangleArea",
				Handler:    srvCopy.rectangleArea,
			},
			{
				MethodName: "RhombusArea",
				Handler:    srvCopy.rhombusArea,
			},
			{
				MethodName: "SquareArea",
				Handler:    srvCopy.squareArea,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "area_calculator/area_calculator.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewAreaCalculatorService creates a new AreaCalculatorService containing the
// implemented methods of the AreaCalculator service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewAreaCalculatorService(s interface{}) *AreaCalculatorService {
	ns := &AreaCalculatorService{}
	if h, ok := s.(interface {
		TriangleArea(context.Context, *TriangleParams) (*AreaReply, error)
	}); ok {
		ns.TriangleArea = h.TriangleArea
	}
	if h, ok := s.(interface {
		RectangleArea(context.Context, *RectangleParams) (*AreaReply, error)
	}); ok {
		ns.RectangleArea = h.RectangleArea
	}
	if h, ok := s.(interface {
		RhombusArea(context.Context, *RhombusParams) (*AreaReply, error)
	}); ok {
		ns.RhombusArea = h.RhombusArea
	}
	if h, ok := s.(interface {
		SquareArea(context.Context, *SquareParams) (*AreaReply, error)
	}); ok {
		ns.SquareArea = h.SquareArea
	}
	return ns
}

// UnstableAreaCalculatorService is the service API for AreaCalculator service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableAreaCalculatorService interface {
	TriangleArea(context.Context, *TriangleParams) (*AreaReply, error)
	RectangleArea(context.Context, *RectangleParams) (*AreaReply, error)
	RhombusArea(context.Context, *RhombusParams) (*AreaReply, error)
	SquareArea(context.Context, *SquareParams) (*AreaReply, error)
}
